{
  "version": "0.0.3",
  "name": "csv-parse",
  "description": "CSV parsing implementing the Node.js `stream.Transform` API",
  "repository": {
    "type": "git",
    "url": "http://www.github.com/wdavidw/node-csv-parse"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "latest",
    "csv-generate": "latest",
    "mocha": "latest",
    "should": "latest"
  },
  "optionalDependencies": {},
  "main": "./lib",
  "scripts": {
    "test": "make test"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/wdavidw/node-csv-parse.png)](http://travis-ci.org/wdavidw/node-csv-parse)\n\nPart of the [CSV module](https://github.com/wdavidw/node-csv), this project is a\nparser converting CSV text input into arrays or objects. It implements the \nNode.js `stream.Transform` API. It also provides a simple callback-base API for\nconverniency. It is both extremely easy to use and powerfull. It was first \nreleased in 2010 and is used against big datasets by a large community.\n\n[The full documentation of the CSV parser is available here](http://www.adaltas.com/projects/node-csv/).\n\nNote\n----\n\nThis module is to be considered in beta stage. It is part of an ongoing effort \nto split the current CSV module into complementary modules with a cleaner design \nand the latest stream implementation. However, the code has been imported with \nvery little changes and you should feel confident to use it in your code.\n\nUsage\n-----\n\nRun `npm install csv` to install the full csv module or run \n`npm install csv-parse` if you are only interested by the CSV parser.\n\nUse the callback style API for simplicity or the stream based API for \nscalability.\n\nFor examples, refer to [the \"samples\" folder][csv-samples], \nthe documentation or [the \"test\" folder][csv-test].\n\n### Using the callback API\n\nThe parser receive a string and return an array inside a user-provided \ncallback. This example is available with the command `node samples/callback.js`.\n\n```javascript\nvar parse = require('csv-parse');\n\ninput = '#Welcome\\n\"1\",\"2\",\"3\",\"4\"\\n\"a\",\"b\",\"c\",\"d\"';\nparse(input, {comment: '#'}, function(err, output){\n  output.should.eql([ [ '1', '2', '3', '4' ], [ 'a', 'b', 'c', 'd' ] ]);\n});\n```\n\n### Using the stream API\n    \n```javascript\n// node samples/stream.js\nvar parse = require('csv-parse');\n\noutput = [];\nparser = parse({delimiter: ':'})\nparser.on('readable', function(){\n  while(row = parser.read()){\n    output.push(row)\n  }\n});\nparser.on('error', function(err){\n  consol.log(err.message);\n});\nparser.on('finish', function(){\n  output.should.eql([\n    [ 'root','x','0','0','root','/root','/bin/bash' ],\n    [ 'someone','x','1022','1022','a funny cat','/home/someone','/bin/bash' ]\n  ]);\n});\nparser.write(\"root:x:0:0:root:/root:/bin/bash\\n\");\nparser.write(\"someone:x:1022:1022:a funny cat:/home/someone:/bin/bash\\n\");\nparser.end()\n```\n\n### Using the pipe function\n\nOne usefull function part of the Stream API is `pipe` to interact between \nmultiple streams. You may use this function to pipe a `stream.Readable` string \nsource to a `stream.Writable` object destination. The next example available as \n`node samples/pipe.js` read the file, parse its content and transform it.\n\n```javascript\noutput = [];\nparser = parse({delimiter: ':'})\ninput = fs.createReadStream('/etc/passwd');\ntransformer = transform(function(row, callback){\n  setTimeout(function(){\n    callback(null, row.join(' ')+'\\n');\n  }, 500);\n}, {parallel: 10});\ninput.pipe(parser).pipe(transformer).pipe(process.stdout);\n```\n\nMigration\n---------\n\nMost of the generator is imported from its parent project [CSV][csv] in a effort \nto split it between the generator, the parser, the transformer and the \nstringifier.\n\nDevelopment\n-----------\n\nTests are executed with mocha. To install it, simple run `npm install` \nfollowed by `npm test`. It will install mocha and its dependencies in your \nproject \"node_modules\" directory and run the test suite. The tests run \nagainst the CoffeeScript source files.\n\nTo generate the JavaScript files, run `make build`.\n\nThe test suite is run online with [Travis][travis] against the versions \n0.9, 0.10 and 0.11 of Node.js.\n\nContributors\n------------\n\n*   David Worms: <https://github.com/wdavidw>\n*   Will White: <https://github.com/willwhite>\n*   Justin Latimer: <https://github.com/justinlatimer>\n*   jonseymour: <https://github.com/jonseymour>\n*   pascalopitz: <https://github.com/pascalopitz>\n*   Josh Pschorr: <https://github.com/jpschorr>\n*   Elad Ben-Israel: <https://github.com/eladb>\n*   Philippe Plantier: <https://github.com/phipla>\n*   Tim Oxley: <https://github.com/timoxley>\n*   Damon Oehlman: <https://github.com/DamonOehlman>\n*   Alexandru Topliceanu: <https://github.com/topliceanu>\n*   Visup: <https://github.com/visup>\n*   Edmund von der Burg: <https://github.com/evdb>\n*   Douglas Christopher Wilson: <https://github.com/dougwilson>\n*   Chris Khoo: <https://github.com/khoomeister>\n*   Joeasaurus: <https://github.com/Joeasaurus>\n\nRelated projects\n----------------\n\n*   Pavel Kolesnikov \"ya-csv\": <http://github.com/koles/ya-csv>\n*   Chris Williams \"node-csv\": <http://github.com/voodootikigod/node-csv>\n\n[csv]: https://github.com/wdavidw/node-csv\n[csv-samples]: https://github.com/wdavidw/node-csv-parse/tree/master/samples\n[csv-test]: https://github.com/wdavidw/node-csv-parse/tree/master/test\n[travis]: https://travis-ci.org/#!/wdavidw/node-csv-parse\n\n",
  "readmeFilename": "README.md",
  "_id": "csv-parse@0.0.3",
  "_shasum": "c7bd3612c74766d323a544f46af0d3090fc8c531",
  "_from": "csv-parse@",
  "_resolved": "https://registry.npmjs.org/csv-parse/-/csv-parse-0.0.3.tgz"
}
